'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
};

var isEmptyChildren = function (children) {
    return React.Children.count(children) === 0;
};

function throttle(func, wait) {
    var timeout = null;
    var callbackArgs = null;
    var context = this;
    var later = function () {
        func.apply(context, callbackArgs);
        timeout = null;
    };
    return function () {
        if (!timeout) {
            callbackArgs = arguments;
            timeout = setTimeout(later, wait);
        }
    };
}

var supportsPassiveListener = false;
var noop = function () { };
try {
    var opts = Object.defineProperty({}, 'passive', {
        get: function () {
            supportsPassiveListener = true;
        },
    });
    window.addEventListener('testPassive', noop, opts);
    window.removeEventListener('testPassive', noop, opts);
}
catch (e) { }

var Scroll = (function (_super) {
    __extends(Scroll, _super);
    function Scroll() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { x: 0, y: 0 };
        _this.handleWindowScroll = throttle(function () {
            _this.setState({ x: window.scrollX, y: window.scrollY });
        }, _this.props.throttle);
        return _this;
    }
    Scroll.prototype.componentDidMount = function () {
        this.handleWindowScroll();
        window.addEventListener('scroll', this.handleWindowScroll, supportsPassiveListener ? { passive: true } : false);
    };
    Scroll.prototype.componentWillUnmount = function () {
        window.removeEventListener('scroll', this.handleWindowScroll);
    };
    Scroll.prototype.render = function () {
        var _a = this.props, render = _a.render, component = _a.component, children = _a.children;
        return component
            ? React.createElement(component, this.state)
            : render
                ? render(this.state)
                : children
                    ? typeof children === 'function'
                        ? children(this.state)
                        : !isEmptyChildren(children) ? React.Children.only(children) : null
                    : null;
    };
    Scroll.defaultProps = {
        throttle: 100,
    };
    return Scroll;
}(React.Component));

var REACT_STATICS = {
    childContextTypes: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    mixins: true,
    propTypes: true,
    type: true,
};
var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true,
};
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = getPrototypeOf && getPrototypeOf(Object);
var getOwnPropertyNames = Object.getOwnPropertyNames;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!REACT_STATICS[key] &&
                !KNOWN_STATICS[key] &&
                (!blacklist || !blacklist[key])) {
                if (propIsEnumerable.call(sourceComponent, key) ||
                    typeof sourceComponent[key] === 'function') {
                    try {
                        targetComponent[key] = sourceComponent[key];
                    }
                    catch (e) { }
                }
            }
        }
        return targetComponent;
    }
    return targetComponent;
}

function withScroll(Component$$1) {
    var S = function (props) {
        return (React.createElement(Scroll, { render: function (p) { return React.createElement(Component$$1, __assign({}, props, p)); } }));
    };
    return hoistNonReactStatics(S, Component$$1);
}

var DeviceMotion = (function (_super) {
    __extends(DeviceMotion, _super);
    function DeviceMotion() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            acceleration: {
                x: null,
                y: null,
                z: null,
            },
            accelerationIncludingGravity: {
                x: null,
                y: null,
                z: null,
            },
            rotationRate: {
                alpha: null,
                beta: null,
                gamma: null,
            },
            interval: 0,
        };
        _this.handleDeviceMotion = function (e) {
            _this.setState({
                acceleration: e.acceleration,
                accelerationIncludingGravity: e.accelerationIncludingGravity,
                rotationRate: e.rotationRate,
                interval: e.interval,
            });
        };
        return _this;
    }
    DeviceMotion.prototype.componentDidMount = function () {
        window.addEventListener('devicemotion', this.handleDeviceMotion, true);
    };
    DeviceMotion.prototype.componentWillUnmount = function () {
        window.removeEventListener('devicemotion', this.handleDeviceMotion);
    };
    DeviceMotion.prototype.render = function () {
        var _a = this.props, render = _a.render, component = _a.component, children = _a.children;
        return component
            ? React.createElement(component, this.state)
            : render
                ? render(this.state)
                : children
                    ? typeof children === 'function'
                        ? children(this.state)
                        : !isEmptyChildren(children) ? React.Children.only(children) : null
                    : null;
    };
    return DeviceMotion;
}(React.Component));

function withDeviceMotion(Component$$1) {
    var S = function (props) {
        return (React.createElement(DeviceMotion, { render: function (p) { return React.createElement(Component$$1, __assign({}, props, p)); } }));
    };
    return hoistNonReactStatics(S, Component$$1);
}

var DeviceOrientation = (function (_super) {
    __extends(DeviceOrientation, _super);
    function DeviceOrientation() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            alpha: null,
            beta: null,
            gamma: null,
            absolute: false,
        };
        _this.handleDeviceOrientation = function (e) {
            _this.setState({
                beta: e.beta,
                alpha: e.alpha,
                gamma: e.gamma,
                absolute: e.absolute,
            });
        };
        return _this;
    }
    DeviceOrientation.prototype.componentDidMount = function () {
        window.addEventListener('deviceorientation', this.handleDeviceOrientation, true);
    };
    DeviceOrientation.prototype.componentWillUnmount = function () {
        window.removeEventListener('deviceorientation', this.handleDeviceOrientation);
    };
    DeviceOrientation.prototype.render = function () {
        var _a = this.props, render = _a.render, component = _a.component, children = _a.children;
        return component
            ? React.createElement(component, this.state)
            : render
                ? render(this.state)
                : children
                    ? typeof children === 'function'
                        ? children(this.state)
                        : !isEmptyChildren(children) ? React.Children.only(children) : null
                    : null;
    };
    return DeviceOrientation;
}(React.Component));

function withDeviceOrientation(Component$$1) {
    var S = function (props) {
        return (React.createElement(DeviceOrientation, { render: function (p) { return React.createElement(Component$$1, __assign({}, props, p)); } }));
    };
    return hoistNonReactStatics(S, Component$$1);
}

var Network = (function (_super) {
    __extends(Network, _super);
    function Network() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { online: navigator.onLine };
        _this.handleOnline = function () {
            _this.setState({ online: true, offlineAt: undefined });
        };
        _this.handleOffline = function () {
            _this.setState({ online: false, offlineAt: new Date() });
        };
        return _this;
    }
    Network.prototype.componentDidMount = function () {
        if (typeof window !== 'undefined' && navigator) {
            this.setState({ online: navigator.onLine });
        }
        window.addEventListener('online', this.handleOnline);
        window.addEventListener('offline', this.handleOffline);
    };
    Network.prototype.componentWillUnmount = function () {
        window.removeEventListener('online', this.handleOnline);
        window.removeEventListener('offline', this.handleOffline);
    };
    Network.prototype.render = function () {
        var _a = this.props, render = _a.render, component = _a.component, children = _a.children;
        return component
            ? React.createElement(component, this.state)
            : render
                ? render(this.state)
                : children
                    ? typeof children === 'function'
                        ? children(this.state)
                        : !isEmptyChildren(children) ? React.Children.only(children) : null
                    : null;
    };
    return Network;
}(React.Component));

function withNetwork(Component$$1) {
    var S = function (props) {
        return (React.createElement(Network, { render: function (p) { return React.createElement(Component$$1, __assign({}, props, p)); } }));
    };
    return hoistNonReactStatics(S, Component$$1);
}

var GeoPosition = (function (_super) {
    __extends(GeoPosition, _super);
    function GeoPosition() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isLoading: true,
        };
        _this.requestGeo = function () {
            _this.setState({ isLoading: true });
            _this.geoId = navigator.geolocation.watchPosition(function (position) {
                return _this.setState({
                    isLoading: false,
                    coords: {
                        latitude: position.coords.latitude,
                        longitude: position.coords.longitude,
                    },
                    error: undefined,
                });
            }, function (error) { return _this.setState({ error: error, isLoading: false }); });
        };
        return _this;
    }
    GeoPosition.prototype.componentDidMount = function () {
        this.requestGeo();
    };
    GeoPosition.prototype.componentWillUnmount = function () {
        navigator.geolocation.clearWatch(this.geoId);
    };
    GeoPosition.prototype.render = function () {
        var _a = this.props, render = _a.render, component = _a.component, children = _a.children;
        return component
            ? React.createElement(component, this.state)
            : render
                ? render(this.state)
                : children
                    ? typeof children === 'function'
                        ? children(this.state)
                        : !isEmptyChildren(children) ? React.Children.only(children) : null
                    : null;
    };
    return GeoPosition;
}(React.Component));

function withGeoPosition(Component$$1) {
    var S = function (props) {
        return (React.createElement(GeoPosition, { render: function (p) { return React.createElement(Component$$1, __assign({}, props, p)); } }));
    };
    return hoistNonReactStatics(S, Component$$1);
}

var M = require('react-media');
var Media = M;

var WindowSize = (function (_super) {
    __extends(WindowSize, _super);
    function WindowSize() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { width: 0, height: 0 };
        _this.handleWindowSize = throttle(function () {
            _this.setState({ width: window.innerWidth, height: window.innerHeight });
        }, _this.props.throttle);
        return _this;
    }
    WindowSize.prototype.componentDidMount = function () {
        this.handleWindowSize();
        window.addEventListener('resize', this.handleWindowSize);
    };
    WindowSize.prototype.componentWillUnmount = function () {
        window.removeEventListener('resize', this.handleWindowSize);
    };
    WindowSize.prototype.render = function () {
        var _a = this.props, render = _a.render, component = _a.component, children = _a.children;
        return component
            ? React.createElement(component, this.state)
            : render
                ? render(this.state)
                : children
                    ? typeof children === 'function'
                        ? children(this.state)
                        : !isEmptyChildren(children) ? React.Children.only(children) : null
                    : null;
    };
    WindowSize.defaultProps = {
        throttle: 100,
    };
    return WindowSize;
}(React.Component));

function withWindowSize(Component$$1) {
    var S = function (props) {
        return (React.createElement(WindowSize, { render: function (p) { return React.createElement(Component$$1, __assign({}, props, p)); } }));
    };
    return hoistNonReactStatics(S, Component$$1);
}

var Locales = (function (_super) {
    __extends(Locales, _super);
    function Locales() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { locale: _this.preferredLocales() };
        _this.handleLanguageChange = function () {
            _this.setState({
                locale: _this.preferredLocales(),
            });
        };
        return _this;
    }
    Locales.prototype.preferredLocales = function () {
        if (navigator.languages && navigator.languages.length > 0) {
            return Intl.getCanonicalLocales(navigator.languages)[0];
        }
        return Intl.getCanonicalLocales([navigator.language])[0];
    };
    Locales.prototype.componentDidMount = function () {
        window.addEventListener('languagechange', this.handleLanguageChange);
    };
    Locales.prototype.componentWillUnmount = function () {
        window.removeEventListener('languagechange', this.handleLanguageChange);
    };
    Locales.prototype.render = function () {
        var _a = this.props, render = _a.render, component = _a.component, children = _a.children;
        return component
            ? React.createElement(component, this.state)
            : render
                ? render(this.state)
                : children
                    ? typeof children === 'function'
                        ? children(this.state)
                        : !isEmptyChildren(children) ? React.Children.only(children) : null
                    : null;
    };
    return Locales;
}(React.Component));

function withLocales(Component$$1) {
    var S = function (props) {
        return (React.createElement(Locales, { render: function (p) { return React.createElement(Component$$1, __assign({}, props, p)); } }));
    };
    return hoistNonReactStatics(S, Component$$1);
}

exports.Scroll = Scroll;
exports.withScroll = withScroll;
exports.DeviceMotion = DeviceMotion;
exports.withDeviceMotion = withDeviceMotion;
exports.DeviceOrientation = DeviceOrientation;
exports.withDeviceOrientation = withDeviceOrientation;
exports.Network = Network;
exports.withNetwork = withNetwork;
exports.GeoPosition = GeoPosition;
exports.withGeoPosition = withGeoPosition;
exports.Media = Media;
exports.WindowSize = WindowSize;
exports.withWindowSize = withWindowSize;
exports.Locales = Locales;
exports.withLocales = withLocales;
//# sourceMappingURL=index.js.map
